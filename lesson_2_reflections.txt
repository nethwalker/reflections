What happens when you initialize a repository? Why do you need to do it?
Git creates a hidden .git folder with the metadata to store. This needs to be done to set up the git repository on the local machine.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It is a temporary area where you can add files but still make changes before finally commiting to git.

How can you use the staging area to make sure you have one commit per logical change?
You can compare the working area to the staging area (git diff) or the staging area to the last commit (git diff --staged) to ensure that the changes are what you really want and that there is only one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you want to experiment with a new feature or change code in a way that may break the program but still want to keep the working master for easy retrieval and use. Branches will allow you to experiment, innovate, and try new things.

How do the diagrams help you visualize the branch structure?
To see what branches (and detached heads) exist for each commit.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The two branches become one. We represent it with two arrows because the merged master contains the code from both branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Pros: you get to make the decisions
Cons: can take longer for obvious merges
